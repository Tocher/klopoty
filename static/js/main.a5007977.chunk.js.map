{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["points","App","className","defaultState","center","zoom","options","preset","groupByCoordinates","map","coordinates","index","modules","geometry","properties","balloonContent","hideIconOnBalloonOpen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAIMA,EAA8B,CAChC,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,YAoCDC,MAjCf,WACE,OACI,cAAC,IAAD,UACE,cAAC,IAAD,CACIC,UAAU,MACVC,aAAc,CAAEC,OAAQ,CAAC,UAAW,WAAYC,KAAM,IAF1D,SAII,cAAC,IAAD,CACIC,QAAS,CACLC,OAAQ,0BACRC,oBAAoB,GAH5B,SAMKR,EAAOS,KAAI,SAACC,EAAaC,GAAd,OACR,cAAC,IAAD,CACIC,QAAS,CAAC,2BAEVC,SAAUH,EACVI,WAAY,CACRC,eAAgB,kCAEpBT,QAAS,CACLU,uBAAuB,EACvBT,OAAQ,gCAPPI,aCbdM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a5007977.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Clusterer, Map, Placemark, PlacemarkGeometry, YMaps} from 'react-yandex-maps';\n\nconst points: PlacemarkGeometry[] = [\n    [53.931574, 27.623856],\n    [53.731574, 27.523856],\n    [53.801574, 27.723856],\n    [53.831574, 27.793856],\n];\n\nfunction App() {\n  return (\n      <YMaps>\n        <Map\n            className=\"map\"\n            defaultState={{ center: [53.931574, 27.623856], zoom: 10 }}\n        >\n            <Clusterer\n                options={{\n                    preset: 'islands#redClusterIcons',\n                    groupByCoordinates: false,\n                }}\n            >\n                {points.map((coordinates, index) => (\n                    <Placemark\n                        modules={[\"geoObject.addon.balloon\"]}\n                        key={index}\n                        geometry={coordinates}\n                        properties={{\n                            balloonContent: 'Текст',\n                        }}\n                        options={{\n                            hideIconOnBalloonOpen: false,\n                            preset: 'islands#redGardenCircleIcon', // islands#COLOR + NAME + CircleIcon\n                        }}\n                    />\n                ))}\n            </Clusterer>\n        </Map>\n      </YMaps>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}